package  com.srbn.Parser;

import java_cup.runtime.*;
import com.srbn.Obj.*;

class Parser;

//terminal INSERT, SELECCIONAR, FILTRAR, EN, VALORES,
//SEMICOLON, DBLEQUOTES, OPNPARENT, CLSPARENT, COMMA, DOT, WORD, NUMBER,
//            OPERATOR, ;

parser code{:

    public void syntax_error(Symbol s){
            System.out.println("sintax error: " +s.value + " en la línea " + s.right+ " en la columna " + s.left);
    }

    public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
	    System.out.println("unrec sintax error: " +s.value + " en la línea " + s.right+" en la columna " + s.left);
    }

:};

terminal     NUMBER, WORD, SEMICOLON, OPNPARENT, CLSPARENT, DBLEQUOTES, DOT,
             COMMA, SELECCIONAR, FILTRAR, INSERTAR, ACTUALIZAR, ASIGNAR, ELIMINAR, EN,
             EQUAL, MINORQ, MINOR_EQ, MAYORQ, MAYOR_EQ, INEQUAL, ASTERISK, AND, OR, VALORES;

non terminal Value value, values, valueslist;
non terminal Column colnames, columns, colvalues, caller;
non terminal Query S, T, U, V, PROGRAM, QUERY, path,
             filters, assignations, assignation, conditions, condition,
             num_comparation, str_comparation, num_assign, str_assign;

start with PROGRAM;

PROGRAM::=      PROGRAM:prog QUERY:qa                                                           {:
                                                                                                    prog.addQuery(qa);
                                                                                                    RESULT = prog;
                                                                                                :}
    |           QUERY:qa                                                                        {:
                                                                                                    Query queries = new Query();
                                                                                                    queries.addQuery(qa);
                                                                                                    RESULT = queries;
                                                                                                :}
    ;

QUERY::=        S:s                                                                             {: RESULT = s; System.out.println("s query");:}
    |           T:t                                                                             {: System.out.println("t query");:}
    |           U:u                                                                             {: System.out.println("u query");:}
    |           V:v                                                                             {: System.out.println("v query");:}
    ;

S::=            INSERTAR EN path:path colvalues:colvalues valueslist:valuesl SEMICOLON          {:  path.setType(QueryType.INSERTAR.ordinal());
                                                                                                    path.setColumns(colvalues.getColumns());
                                                                                                    path.setValues(valuesl.getValues());
                                                                                                    RESULT=path;
                                                                                                :}
    ;

//-----------------------------------------------------------------------------------------------------------------------------------------

T::=            SELECCIONAR caller EN path filters SEMICOLON                    {: System.out.println("Select query");:}
    ;

U::=            ELIMINAR EN path filters SEMICOLON                              {: System.out.println("delete query");:}
    ;
V::=            ACTUALIZAR EN path ASIGNAR assignations filters SEMICOLON       {: System.out.println("update query");:}
    ;

path::=         WORD:proy DOT:dot WORD:file                                     {:
                                                                                    System.out.println("path query");
                                                                                    Query query = new Query();
                                                                                    RESULT = query;
                                                                                :}
    ;

colvalues::=    colnames:cln VALORES:valores                                    {: RESULT = cln;:}
    |           VALORES:valores                                                 {: RESULT = new Column();:}
    ;

colnames::=     OPNPARENT columns:colns CLSPARENT                               {: RESULT = colns;:}
    ;

columns::=      columns:columns COMMA WORD:word                                 {:
                                                                                    columns.addColumn(new Column(word.toString()));
                                                                                    RESULT = columns;
                                                                                :}
    |           WORD:word                                                       {:
                                                                                    Column columns = new Column();
                                                                                    columns.addColumn(new Column(word.toString()));
                                                                                    RESULT = columns;
                                                                                :}
    ;

valueslist::=   OPNPARENT values:vals CLSPARENT                                  {: RESULT = vals;:}
    ;

values::=       values:vals COMMA value:val                                     {:
                                                                                    vals.addValue(val);
                                                                                    RESULT = vals;
                                                                                :}
    |           value:val                                                       {:
                                                                                    Value value = new Value();
                                                                                    value.addValue(val);
                                                                                    RESULT = value;
                                                                                :}
    ;

value::=        NUMBER:num                                                      {: RESULT = new Value(Integer.parseInt(num.toString()));:}
    |           DBLEQUOTES WORD:word   DBLEQUOTES                               {: RESULT = new Value(word.toString());:}
    |           DBLEQUOTES NUMBER:num  DBLEQUOTES                               {: RESULT = new Value(num.toString());:}
    ;

caller::=       columns
    |           ASTERISK
    ;

filters::=      FILTRAR conditions
    |
    ;

assignations::= assignations COMMA assignation
    |           assignation
    ;

assignation::=  num_assign
    |           str_assign
    ;

conditions::=   conditions AND condition
    |           conditions OR condition
    |           condition
    ;

condition::=    num_comparation
    |           str_comparation
    ;

num_assign::=   WORD EQUAL NUMBER
    ;

str_assign::=   WORD EQUAL     DBLEQUOTES NUMBER   DBLEQUOTES
    |           WORD EQUAL     DBLEQUOTES WORD     DBLEQUOTES
    ;

num_comparation::= num_assign
    |           WORD MAYOR_EQ NUMBER
    |           WORD MINOR_EQ NUMBER
    |           WORD MAYORQ   NUMBER
    |           WORD MINORQ   NUMBER
    |           WORD INEQUAL  NUMBER
    ;

str_comparation::= str_assign
    |           WORD INEQUAL   DBLEQUOTES NUMBER   DBLEQUOTES
    |           WORD INEQUAL   DBLEQUOTES WORD     DBLEQUOTES
    ;