package  com.srbn.Parser;

import java_cup.runtime.*;
import com.srbn.obj.*;

class Parser;


parser code{:

    public void syntax_error(Symbol s){
            System.out.println("sintax error: " +s.value + " en la línea " + s.right+ " en la columna " + s.left);
    }

    public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
	    System.out.println("unrec sintax error: " +s.value + " en la línea " + s.right+" en la columna " + s.left);
    }

:};

terminal     NUMBER, WORD, SEMICOLON, OPNPARENT, CLSPARENT, DBLEQUOTES, DOT,
             COMMA, SELECCIONAR, FILTRAR, INSERTAR, ACTUALIZAR, ASIGNAR, ELIMINAR, EN,
             EQUAL, MINORQ, MINOR_EQ, MAYORQ, MAYOR_EQ, INEQUAL, ASTERISK, AND, OR, VALORES;

non terminal Value value, values, valueslist;
non terminal Column colnames, columns, colvalues, caller;
non terminal Statement filters, statements, statement, num_comparation, str_comparation,
             num_assign, str_assign, assignations, assignation;
non terminal String path;
non terminal Query S, T, U, V, PROGRAM, QUERY;

start with PROGRAM;

PROGRAM::=      PROGRAM:prog QUERY:qa                                                           {:
                                                                                                    prog.addQuery(qa);
                                                                                                    RESULT = prog;
                                                                                                :}
    |           QUERY:qa                                                                        {:
                                                                                                    Query queries = new Query();
                                                                                                    queries.addQuery(qa);
                                                                                                    RESULT = queries;
                                                                                                :}
    ;

QUERY::=        S:s                                                                             {: RESULT = s; System.out.println("s query");:}
    |           T:t                                                                             {: RESULT = t; System.out.println("t query");:}
    |           U:u                                                                             {: RESULT = u; System.out.println("u query");:}
    |           V:v                                                                             {: RESULT = v; System.out.println("v query");:}
    ;

S::=            INSERTAR EN path:path colvalues:colvalues valueslist:valuesl SEMICOLON          {:
                                                                                                    Query query = new Query();
                                                                                                    query.setPath(path);
                                                                                                    query.setType(QueryType.INSERTAR.ordinal());
                                                                                                    query.setColumns(colvalues.getColumns());
                                                                                                    query.setValues(valuesl.getValues());
                                                                                                    RESULT = query;
                                                                                                :}
    ;

T::=            SELECCIONAR caller:call EN path:path filters:filter SEMICOLON                   {:
                                                                                                    Query query = new Query();
                                                                                                    query.setType(QueryType.SELECCIONAR.ordinal());
                                                                                                    query.setColumns(call.getColumns());
                                                                                                    query.setPath(path);
                                                                                                    query.setStatements(filter.getStatements());
                                                                                                    RESULT = query;
                                                                                                :}
    ;

U::=            ELIMINAR EN path:path filters:filter SEMICOLON                                  {:
                                                                                                    Query query = new Query();
                                                                                                    query.setType(QueryType.ELIMINAR.ordinal());
                                                                                                    query.setPath(path);
                                                                                                    query.setStatements(filter.getStatements());
                                                                                                    RESULT = query;
                                                                                                :}
    ;
V::=            ACTUALIZAR EN path:path ASIGNAR assignations:assign filters:filter SEMICOLON    {:
                                                                                                    Query query = new Query();
                                                                                                    query.setType(QueryType.ACTUALIZAR.ordinal());
                                                                                                    query.setPath(path);
                                                                                                    query.setAssignations(assign.getStatements());
                                                                                                    query.setStatements(filter.getStatements());
                                                                                                    RESULT = query;
                                                                                                :}
    ;

//-----------------------------------------------------------------------------------------------------------------------------------------


path::=         WORD:proy DOT:dot WORD:file                                     {:
                                                                                    System.out.println("path query");
                                                                                    String path = proy.toString() + dot.toString() + file.toString();
                                                                                    RESULT = path;
                                                                                :}
    ;

caller::=       columns:cols                                                    {:
                                                                                    Column columns = new Column();
                                                                                    columns.addColumn(cols);
                                                                                    RESULT = columns;
                                                                                :}
    |           ASTERISK                                                        {:
                                                                                    RESULT = new Column();
                                                                                :}
    ;

colvalues::=    colnames:cln VALORES:valores                                    {:
                                                                                    RESULT = cln;
                                                                                :}
    |           VALORES:valores                                                 {:
                                                                                    RESULT = new Column();
                                                                                :}
    ;

colnames::=     OPNPARENT columns:cols CLSPARENT                               {:
                                                                                    Column columns = new Column();
                                                                                    columns.addColumn(cols);
                                                                                    RESULT = columns;
                                                                                :}
    ;

columns::=      columns:columns COMMA WORD:word                                 {:
                                                                                    columns.addColumn(new Column(word.toString()));
                                                                                    RESULT = columns;
                                                                                :}
    |           WORD:word                                                       {:
                                                                                    Column columns = new Column();
                                                                                    columns.addColumn(new Column(word.toString()));
                                                                                    RESULT = columns;
                                                                                :}
    ;

valueslist::=   OPNPARENT values:vals CLSPARENT                                 {:
                                                                                    RESULT = vals;
                                                                                :}
    ;

values::=       values:vals COMMA value:val                                     {:
                                                                                    vals.addValue(val);
                                                                                    RESULT = vals;
                                                                                :}
    |           value:val                                                       {:
                                                                                    Value value = new Value();
                                                                                    value.addValue(val);
                                                                                    RESULT = value;
                                                                                :}
    ;

value::=        NUMBER:num                                                      {:
                                                                                    Value value = new Value();
                                                                                    value.addValue(new Value(Integer.parseInt(num.toString())));
                                                                                    RESULT = value;
                                                                                :}
    |           DBLEQUOTES WORD:word   DBLEQUOTES                               {:
                                                                                    Value value = new Value();
                                                                                    value.addValue(new Value(word.toString()));
                                                                                    RESULT = value;
                                                                                :}
    |           DBLEQUOTES NUMBER:num  DBLEQUOTES                               {:
                                                                                    Value value = new Value();
                                                                                    value.addValue(new Value(num.toString()));
                                                                                    RESULT = value;
                                                                                :}
    ;



filters::=      FILTRAR statements:statements                                   {:
                                                                                    RESULT = statements;
                                                                                :}
    |                                                                           {:
                                                                                    RESULT = new Statement();
                                                                                :}
    ;

assignations::= assignations:assings COMMA assignation:assing                   {:
                                                                                    assings.addStatement(assing);
                                                                                    RESULT = assings;
                                                                                :}
    |           assignation:assing                                              {:
                                                                                    Statement assings = new Statement();
                                                                                    assings.addStatement(assing);
                                                                                    RESULT = assings;
                                                                                :}
    ;

assignation::=  num_assign:numass                                               {:
                                                                                    RESULT = numass;
                                                                                :}
    |           str_assign:strass                                               {:
                                                                                    RESULT = strass;
                                                                                :}
    ;

statements::=   statements:conds AND statement:cond                             {:
                                                                                    conds.addStatement(cond);
                                                                                    RESULT = conds;
                                                                                :}
    |           statements:conds OR statement:cond                              {:
                                                                                    conds.addStatement(cond);
                                                                                    RESULT = conds;
                                                                                :}
    |           statement:cond                                                  {:
                                                                                    Statement statements = new Statement();
                                                                                    statements.addStatement(cond);
                                                                                    RESULT = statements;
                                                                                :}
    ;

statement::=    num_comparation:numcomp                                         {:
                                                                                    RESULT = numcomp;
                                                                                :}
    |           str_comparation:strcomp                                         {:
                                                                                    RESULT = strcomp;
                                                                                :}
    ;

num_assign::=   WORD:wrd EQUAL:symb NUMBER:num                                  {:
                                                                                    Statement statements = new Statement();
                                                                                    Statement stat = new Statement(wrd.toString(), symb.toString(), num.toString());
                                                                                    statements.addStatement(stat);
                                                                                    RESULT = statements;
                                                                                :}
    ;

str_assign::=   WORD:wrd EQUAL:symb     DBLEQUOTES NUMBER:num   DBLEQUOTES      {:
                                                                                    Statement statements = new Statement();
                                                                                    Statement stat = new Statement(wrd.toString(), symb.toString(), num.toString());
                                                                                    statements.addStatement(stat);
                                                                                    RESULT = statements;
                                                                                :}
    |           WORD:wrd EQUAL:symb     DBLEQUOTES WORD:wrd2     DBLEQUOTES     {:
                                                                                    Statement statements = new Statement();
                                                                                    Statement stat = new Statement(wrd.toString(), symb.toString(), wrd2.toString());
                                                                                    statements.addStatement(stat);
                                                                                    RESULT = statements;
                                                                                :}
    ;

num_comparation::= num_assign:numass                                            {:
                                                                                    RESULT = numass;
                                                                                :}
    |           WORD:wrd MAYOR_EQ:symb NUMBER:num                               {:
                                                                                    Statement statements = new Statement();
                                                                                    Statement stat = new Statement(wrd.toString(), symb.toString(), num.toString());
                                                                                    statements.addStatement(stat);
                                                                                    RESULT = statements;
                                                                                :}
    |           WORD:wrd MINOR_EQ:symb NUMBER:num                               {:
                                                                                    Statement statements = new Statement();
                                                                                    Statement stat = new Statement(wrd.toString(), symb.toString(), num.toString());
                                                                                    statements.addStatement(stat);
                                                                                    RESULT = statements;
                                                                                :}
    |           WORD:wrd MAYORQ:symb   NUMBER:num                               {:
                                                                                    Statement statements = new Statement();
                                                                                    Statement stat = new Statement(wrd.toString(), symb.toString(), num.toString());
                                                                                    statements.addStatement(stat);
                                                                                    RESULT = statements;
                                                                                :}
    |           WORD:wrd MINORQ:symb   NUMBER:num                               {:
                                                                                    Statement statements = new Statement();
                                                                                    Statement stat = new Statement(wrd.toString(), symb.toString(), num.toString());
                                                                                    statements.addStatement(stat);
                                                                                    RESULT = statements;
                                                                                :}
    |           WORD:wrd INEQUAL:symb  NUMBER:num                               {:
                                                                                    Statement statements = new Statement();
                                                                                    Statement stat = new Statement(wrd.toString(), symb.toString(), num.toString());
                                                                                    statements.addStatement(stat);
                                                                                    RESULT = statements;
                                                                                :}
    ;

str_comparation::= str_assign:strass                                            {:
                                                                                    RESULT = strass;
                                                                                :}
    |           WORD:wrd INEQUAL:symb   DBLEQUOTES NUMBER:num   DBLEQUOTES      {:
                                                                                    Statement statements = new Statement();
                                                                                    Statement stat = new Statement(wrd.toString(), symb.toString(), num.toString());
                                                                                    statements.addStatement(stat);
                                                                                    RESULT = statements;
                                                                                :}
    |           WORD:wrd INEQUAL:symb   DBLEQUOTES WORD:wrd2     DBLEQUOTES     {:
                                                                                    Statement statements = new Statement();
                                                                                    Statement stat = new Statement(wrd.toString(), symb.toString(), wrd2.toString());
                                                                                    statements.addStatement(stat);
                                                                                    RESULT = statements;
                                                                                :}
    ;